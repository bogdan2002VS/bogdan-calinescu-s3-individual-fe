{"ast":null,"code":"import { initializeApp } from \"firebase/app\";\nimport { createUserWithEmailAndPassword, getAuth, GoogleAuthProvider, sendPasswordResetEmail, signInWithEmailAndPassword, signInWithPopup, signOut, updateProfile } from \"firebase/auth\";\nimport { getDatabase } from \"firebase/database\";\nimport { toastError, toastSuccess, toastWarn } from \"./customToastify\"; //! firebase console settings bölümünden firebaseconfig ayarlarını al\n\nconst firebaseConfig = {\n  apiKey: process.env.REACT_APP_FIREBASE_API_KEY,\n  authDomain: process.env.REACT_APP_FIREBASE_AUTH_DOMAIN,\n  databaseURL: process.env.REACT_APP_FIREBASE_DATABASE_URL,\n  projectId: process.env.REACT_APP_FIREBASE_PROJECT_ID,\n  storageBucket: process.env.REACT_APP_FIREBASE_STORAGE_BUCKET,\n  messagingSenderId: process.env.REACT_APP_FIREBASE_MESSAGING_SENDER_ID,\n  appId: process.env.REACT_APP_FIREBASE_APP_ID\n}; // Initialize Firebase\n\nconst app = initializeApp(firebaseConfig);\nexport const auth = getAuth(app);\nexport const db = getDatabase(app);\nexport const register = async (email, password, displayName, navigate) => {\n  try {\n    const {\n      user\n    } = await createUserWithEmailAndPassword(auth, email, password);\n    await updateProfile(auth.currentUser, {\n      displayName: displayName\n    });\n    navigate(\"/\");\n    console.log(displayName);\n    toastSuccess(\"Signed Up \");\n    return user;\n  } catch (error) {\n    if (error.code === \"auth/email-already-in-use\") {\n      toastError(\"This email address is already in use\");\n    } else if (error.code === \"auth/invalid-email\" || error.code === \"auth/missing-email\") {\n      toastWarn(\"This email address is not valid.\");\n    } else if (error.code === \"auth/weak-password\") {\n      toastWarn(\"Password should be at least 6 characters\");\n    } else {\n      toastError(error.message);\n    }\n  }\n};\nexport const login = async (email, password, navigate) => {\n  try {\n    const user = await signInWithEmailAndPassword(auth, email, password);\n    toastSuccess(\"Logged in \");\n    navigate(\"/\");\n    return user;\n  } catch (error) {\n    if (error.code === \"auth/wrong-password\" || error.code === \"auth/invalid-email\") {\n      toastWarn(\"Your email or password is incorrect. \\nPlease Try Again\");\n    } else if (error.code === \"auth/user-not-found\") {\n      toastWarn(\"User not found.\");\n    } else {\n      toastError(error.message);\n    }\n  }\n};\nexport const logout = async navigate => {\n  try {\n    await signOut(auth);\n    toastSuccess(\"Logged out !\");\n    navigate(\"/login\");\n    return true;\n  } catch (error) {\n    toastError(error.message);\n  }\n};\nconst provider = new GoogleAuthProvider();\nexport const GoogleRegister = navigate => {\n  signInWithPopup(auth, provider).then(result => {\n    const user = result.user;\n    toastSuccess(\"Logged in \");\n    navigate(\"/\");\n    return user;\n  }).catch(error => {\n    if (error.code === \"auth/popup-closed-by-user\") {\n      console.log(\"Popup closed by user\");\n    } else if (error.code === \"auth/cancelled-popup-request\") {\n      console.log(\"cancelled-popup-request\");\n    } else {\n      toastError(error.message);\n    }\n  });\n};\n_c = GoogleRegister;\nexport const forgotPassword = email => {\n  //? Email yoluyla şifre sıfırlama için kullanılan firebase metodu\n  sendPasswordResetEmail(auth, email).then(() => {\n    // Password reset email sent!\n    toastWarn(\"Please check your mail box!\"); // alert(\"Please check your mail box!\");\n  }).catch(error => {\n    if (error.code === \"auth/missing-email\") {\n      toastWarn(\"Please enter your mail adress!\");\n    } else {\n      toastError(error.message);\n    }\n  });\n};\nexport default app;\n\nvar _c;\n\n$RefreshReg$(_c, \"GoogleRegister\");","map":{"version":3,"names":["initializeApp","createUserWithEmailAndPassword","getAuth","GoogleAuthProvider","sendPasswordResetEmail","signInWithEmailAndPassword","signInWithPopup","signOut","updateProfile","getDatabase","toastError","toastSuccess","toastWarn","firebaseConfig","apiKey","process","env","REACT_APP_FIREBASE_API_KEY","authDomain","REACT_APP_FIREBASE_AUTH_DOMAIN","databaseURL","REACT_APP_FIREBASE_DATABASE_URL","projectId","REACT_APP_FIREBASE_PROJECT_ID","storageBucket","REACT_APP_FIREBASE_STORAGE_BUCKET","messagingSenderId","REACT_APP_FIREBASE_MESSAGING_SENDER_ID","appId","REACT_APP_FIREBASE_APP_ID","app","auth","db","register","email","password","displayName","navigate","user","currentUser","console","log","error","code","message","login","logout","provider","GoogleRegister","then","result","catch","forgotPassword"],"sources":["C:/Users/bcali/Desktop/amd RYZEN 7/individual FE/src/helpers/firebase.jsx"],"sourcesContent":["import { initializeApp } from \"firebase/app\";\nimport {\n  createUserWithEmailAndPassword,\n  getAuth,\n  GoogleAuthProvider,\n  sendPasswordResetEmail,\n  signInWithEmailAndPassword,\n  signInWithPopup,\n  signOut,\n  updateProfile,\n} from \"firebase/auth\";\nimport { getDatabase } from \"firebase/database\";\nimport { toastError, toastSuccess, toastWarn } from \"./customToastify\";\n\n//! firebase console settings bölümünden firebaseconfig ayarlarını al\nconst firebaseConfig = {\n  apiKey: process.env.REACT_APP_FIREBASE_API_KEY,\n  authDomain: process.env.REACT_APP_FIREBASE_AUTH_DOMAIN,\n  databaseURL: process.env.REACT_APP_FIREBASE_DATABASE_URL,\n  projectId: process.env.REACT_APP_FIREBASE_PROJECT_ID,\n  storageBucket: process.env.REACT_APP_FIREBASE_STORAGE_BUCKET,\n  messagingSenderId: process.env.REACT_APP_FIREBASE_MESSAGING_SENDER_ID,\n  appId: process.env.REACT_APP_FIREBASE_APP_ID,\n};\n\n// Initialize Firebase\nconst app = initializeApp(firebaseConfig);\n\nexport const auth = getAuth(app);\nexport const db = getDatabase(app);\n\nexport const register = async (email, password, displayName, navigate) => {\n  try {\n    const { user } = await createUserWithEmailAndPassword(\n      auth,\n      email,\n      password\n    );\n    await updateProfile(auth.currentUser, { displayName: displayName });\n    navigate(\"/\");\n    console.log(displayName);\n    toastSuccess(\"Signed Up \");\n    return user;\n  } catch (error) {\n    if (error.code === \"auth/email-already-in-use\") {\n      toastError(\"This email address is already in use\");\n    } else if (\n      error.code === \"auth/invalid-email\" ||\n      error.code === \"auth/missing-email\"\n    ) {\n      toastWarn(\"This email address is not valid.\");\n    } else if (error.code === \"auth/weak-password\") {\n      toastWarn(\"Password should be at least 6 characters\");\n    } else {\n      toastError(error.message);\n    }\n  }\n};\n\nexport const login = async (email, password, navigate) => {\n  try {\n    const user = await signInWithEmailAndPassword(auth, email, password);\n    toastSuccess(\"Logged in \");\n    navigate(\"/\");\n    return user;\n  } catch (error) {\n    if (\n      error.code === \"auth/wrong-password\" ||\n      error.code === \"auth/invalid-email\"\n    ) {\n      toastWarn(\"Your email or password is incorrect. \\nPlease Try Again\");\n    } else if (error.code === \"auth/user-not-found\") {\n      toastWarn(\"User not found.\");\n    } else {\n      toastError(error.message);\n    }\n  }\n};\n\nexport const logout = async (navigate) => {\n  try {\n    await signOut(auth);\n    toastSuccess(\"Logged out !\");\n    navigate(\"/login\");\n    return true;\n  } catch (error) {\n    toastError(error.message);\n  }\n};\n\nconst provider = new GoogleAuthProvider();\n\nexport const GoogleRegister = (navigate) => {\n  signInWithPopup(auth, provider)\n    .then((result) => {\n      const user = result.user;\n      toastSuccess(\"Logged in \");\n      navigate(\"/\");\n      return user;\n    })\n    .catch((error) => {\n      if (error.code === \"auth/popup-closed-by-user\") {\n        console.log(\"Popup closed by user\");\n      } else if (error.code === \"auth/cancelled-popup-request\") {\n        console.log(\"cancelled-popup-request\");\n      } else {\n        toastError(error.message);\n      }\n    });\n};\n\nexport const forgotPassword = (email) => {\n  //? Email yoluyla şifre sıfırlama için kullanılan firebase metodu\n  sendPasswordResetEmail(auth, email)\n    .then(() => {\n      // Password reset email sent!\n      toastWarn(\"Please check your mail box!\");\n      // alert(\"Please check your mail box!\");\n    })\n    .catch((error) => {\n      if (error.code === \"auth/missing-email\") {\n        toastWarn(\"Please enter your mail adress!\");\n      } else {\n        toastError(error.message);\n      }\n    });\n};\n\nexport default app;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}